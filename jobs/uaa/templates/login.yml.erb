---
name: login

<%
  config_artifacts_path = "/var/vcap/jobs/login/config/security"
%>

logging:
  config: /var/vcap/jobs/login/config/log4j.properties

<%
  # The login secret is defined in one of two properties
  # uaa.login.client_secret or uaa.clients.login.secret
  # If both of these are defined, then use the latter
  if properties.uaa && properties.uaa.clients && properties.uaa.clients.login && properties.uaa.clients.login.secret
    login_secret = properties.uaa.clients.login.secret
  elsif properties.uaa && properties.uaa.login && properties.uaa.login.client_secret
    login_secret = properties.uaa.login.client_secret
  else
    raise ArgumentError, 'uaa.login.client_secret or uaa.clients.login.secret must be set.'
  end
%>

<% protocol = properties.login.protocol  %>
<% if !properties.login || !properties.login.uaa_base
  # Fix this to https when SSL certs are working in dev and staging
  uaa_base = "#{protocol}://uaa.#{properties.domain}"
else
  uaa_base = properties.login.uaa_base
end %>
uaa:
  url: <%= uaa_base %>
  token:
    url: <%= uaa_base %>/oauth/token
  login:
    url: <%= uaa_base %>/authenticate
  clientinfo:
    url: <%= uaa_base %>/clientinfo
  approvals:
    url: <%= uaa_base %>/approvals
<% if properties.login and properties.login.links then %>
links: <% properties.login.links.marshal_dump.each do |id,url| %>
  <%= id %>: <%= url %><% end %>
<% end %>
<% if properties.login and properties.login.smtp then %>
smtp: <% properties.login.smtp.marshal_dump.each do |key,val| %>
  <%= key %>: <%= val %><% end %>
<% end %>
<% if properties.login and properties.login.tiles then %>
tiles: <% properties.login.tiles.each do |tile| %>
- <% tile.marshal_dump.each do |key,val| %><%= key %>: <%= val %>
  <% end %>
<% end %>
<% end %>

# The secret that this login server will use to authenticate to the uaa
LOGIN_SECRET: <%= login_secret %>
<% if !properties.uaa.require_https.nil? %>
require_https: <%= properties.uaa.require_https %>
<% end %>
<% if !properties.uaa.dump_requests.nil? %>
dump_requests: <%= properties.uaa.dump_requests %>
<% end %>

<% if properties.login && properties.login.asset_base_url %>
assetBaseUrl: <%= properties.login.asset_base_url %>
<% end %>

<% if properties.login.notifications && properties.login.notifications.url %>
notifications:
  url: <%= properties.login.notifications.url %>
<% end %>

<% if properties.login && properties.login.logout && properties.login.logout.redirect %>
logout:
  redirect:
    url: <%= (properties.login.logout.redirect.url) ? properties.login.logout.redirect.url : "/login" %>
    parameter:
      disable: <%= (properties.login.logout.redirect.parameter && (!properties.login.logout.redirect.parameter.disable.nil?)) ? properties.login.logout.redirect.parameter.disable : "true" %><% if (properties.login.logout.redirect.parameter && (!properties.login.logout.redirect.parameter.whitelist.nil?)) %>
      whitelist: <% properties.login.logout.redirect.parameter.whitelist.each do |whitelistedurl| %>
      - <%= whitelistedurl %><% end %>
   <% end %>
<% end %>

login:
  brand: <%= properties.login.brand %>
  url: <%= "#{protocol}://login.#{properties.domain}" %>
  entityBaseURL: <%= (properties.login && properties.login.saml.entity_base_url) ? "#{protocol}://#{properties.login.saml.entity_base_url}" : "#{protocol}://login.#{properties.domain}" %>
  entityID: <%= (properties.login && properties.login.saml.entityid) ? properties.login.saml.entityid : properties.login.entity_id ? properties.login.entity_id : "login.#{properties.domain}" %>
  <% if !properties.login.invitations_enabled.nil? %>
  invitationsEnabled: <%= properties.login.invitations_enabled %>
  <% end %>
  serviceProviderCertificate: |
    <%= p("login.saml.serviceProviderCertificate").gsub("\n", "\n    ")%>
  serviceProviderKey: |
    <%= p("login.saml.serviceProviderKey").gsub("\n", "\n    ")%>
  serviceProviderKeyPassword: <%= properties.login.saml.serviceProviderKeyPassword %>
  <% if !properties.login.self_service_links_enabled.nil? || !properties.login.signups_enabled.nil? %>
  selfServiceLinksEnabled: <%= properties.login.self_service_links_enabled.nil? ? properties.login.signups_enabled : properties.login.self_service_links_enabled %>
  <% end %>
  saml:
    <% if !properties.login.saml.signMetaData.nil? %>
    signMetaData: <%= properties.login.saml.signMetaData %>
    <% end %>
    <% if !properties.login.saml.signRequest.nil? %>
    signRequest: <%= properties.login.saml.signRequest %>
    <% end %>
    providers: <% if properties.login.saml.providers then properties.login.saml.providers.marshal_dump.reject {|k,_| k.to_s == ''}.each do |idpAlias,idpProvider| %>
      <%= idpAlias %>: <% idpProvider.marshal_dump.reject {|k,_| ["idpMetadata", "idpMetadataXML", "idpMetadataURL"].include?(k.to_s)}.each do |key,value|%>
        <%= key %>: <%= value.is_a?(String) && value.match("\n") ? "| \n          " + value.gsub("\n", "\n          ") + "" : value %><% end %>
        idpMetadata: <%= (idpProvider.idpMetadataURL || idpProvider.idpMetadataXML || idpProvider.idpMetadata).inspect %><% end %><% end %><% if properties.login.saml.idpEntityAlias && (properties.login.saml.idpMetadataURL || properties.login.saml.idp_metadata_file) %>
      <%= properties.login.saml.idpEntityAlias %>:
        idpMetadata: <%= properties.login.saml.idpMetadataURL ? properties.login.saml.idpMetadataURL : "/var/vcap/jobs/login/" + properties.login.saml.idp_metadata_file %>
        assertionConsumerIndex: <%= properties.login.saml.assertionConsumerIndex %>
        nameID: <%= properties.login.saml.nameidFormat %>
        metadataTrustCheck: <%= properties.login.saml.metadataTrustCheck %>
        showSamlLoginLink: true
        linkText: 'Use your corporate credentials'
    <% end %>
    socket:
      connectionManagerTimeout: <%= properties.login.saml.socket.connectionManagerTimeout %>
      soTimeout: <%= properties.login.saml.socket.soTimeout %>
  authorize:
    url: <%= "#{protocol}://login.#{properties.domain}/oauth/authorize" %>

<% if properties.login.analytics && properties.login.analytics.code && properties.login.analytics.domain %>
analytics:
  code: <%= properties.login.analytics.code %>
  domain: <%= properties.login.analytics.domain %>
<% end %>
