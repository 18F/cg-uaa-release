#!/bin/bash -e

export PATH=/var/vcap/packages/uaa/jdk/bin:$PATH
RUN_DIR=/var/vcap/sys/run/uaa
LOG_DIR=/var/vcap/sys/log/uaa
JOB_DIR=/var/vcap/jobs/uaa
DATA_DIR=/var/vcap/data/uaa
PIDFILE=$RUN_DIR/uaa.pid
STATUS=/var/vcap/jobs/uaa/bin/status

# Proxy configuration variable for the uaa
HTTP_PROXY_JAVA_OPTIONS=""

# Minimum strength for password
# TODO: move into correct properties file that is local to UAA war file only
UAA_OPTIONS="-Dpassword-policy.required-score=0"

if [[ -f /var/vcap/jobs/uaa/config/cacerts ]]; then
    export KEYSTORE="/var/vcap/jobs/uaa/config/cacerts"
else
    export KEYSTORE="/var/vcap/packages/uaa/jdk/jre/lib/security/cacerts"
fi

export KEYSTORE_OPTS="-Djavax.net.ssl.trustStore=$KEYSTORE -Djavax.net.ssl.trustStoreType=JKS"

<% if properties.env %>
# Proxy configuration
<% if properties.env.http_proxy %>
export HTTP_PROXY='<%= properties.env.http_proxy %>'
export http_proxy='<%= properties.env.http_proxy %>'
proxy_conf=(`echo $HTTP_PROXY | tr ":" " " | tr "\/" " "`)
HTTP_PROXY_JAVA_OPTIONS="$HTTP_PROXY_JAVA_OPTIONS -Dhttp.proxyHost=${proxy_conf[1]} -Dhttp.proxyPort=${proxy_conf[2]} "
<% end %>
<% if properties.env.https_proxy %>
export HTTPS_PROXY='<%= properties.env.https_proxy %>'
export https_proxy='<%= properties.env.https_proxy %>'
proxy_conf=(`echo $HTTPS_PROXY | tr ":" " " | tr "\/" " "`)
HTTP_PROXY_JAVA_OPTIONS="$HTTP_PROXY_JAVA_OPTIONS -Dhttps.proxyHost=${proxy_conf[1]} -Dhttps.proxyPort=${proxy_conf[2]} "
<% end %>
<% if properties.env.no_proxy %>
export NO_PROXY='<%= properties.env.no_proxy %>'
export no_proxy='<%= properties.env.no_proxy %>'
if [ x != x"$NO_PROXY" ]; then
  proxy_conf=`echo $NO_PROXY | sed -e 's/ //g'`

  OIFS=$IFS
  IFS=','
  for host in $proxy_conf; do
      if [[ $host == .* ]]; then
        host="*"$host
      fi
      java_no_proxies=$java_no_proxies"|"$host
  done
  IFS=$OIFS

  # Strip the leading '|'
  java_no_proxies=${java_no_proxies:1}
  HTTP_PROXY_JAVA_OPTIONS="$HTTP_PROXY_JAVA_OPTIONS -Dhttp.nonProxyHosts=\"$java_no_proxies\" "
fi
<% end %>
<% end %>

NEWRELIC_OPTS=
<%
if properties.uaa && properties.uaa.newrelic 
    newrelicenv = String.new("production")
    if properties.uaa && properties.uaa.newrelic && properties.uaa.newrelic.environment
        newrelicenv = p('uaa.newrelic.environment')
    end

    hasnewreliclic = false
    if properties.uaa.newrelic.common && properties.uaa.newrelic.common.license_key
        hasnewreliclic = true
    elsif p('uaa.newrelic.'+newrelicenv+'.license_key').to_s.strip.length > 0
        hasnewreliclic = true
    end 

    if hasnewreliclic %>
<%= "NEWRELIC_OPTS=\"-javaagent:/var/vcap/data/uaa/tomcat/bin/newrelic.jar -Dnewrelic.config.file=$JOB_DIR/config/newrelic.yml -Dnewrelic.environment="+newrelicenv+"\"" %><%
    end
end
%>

export NEWRELIC_OPTS

mkdir -p /var/vcap/sys/log

exec > >(tee -a >(logger -p user.info -t vcap.$(basename $0).stdout) | awk '{lineWithDate="echo [`date +\"%Y-%m-%d %H:%M:%S%z\"`] \"" $0 "\""; system(lineWithDate)  }' >>/var/vcap/sys/log/$(basename $0).log)
exec 2> >(tee -a >(logger -p user.error -t vcap.$(basename $0).stderr) | awk '{lineWithDate="echo [`date +\"%Y-%m-%d %H:%M:%S%z\"`] \"" $0 "\""; system(lineWithDate)  }' >>/var/vcap/sys/log/$(basename $0).err.log)

pid_guard() {
  return_code=0
  pidfile=$1
  name=$2
  if [ -f "$pidfile" ]; then
    pid=$(head -1 "$pidfile")
    if [ -n "$pid" ] && [ ps - $pid ]; then
      echo "$name is already running, please stop it first"
      return_code=1
    else
      echo "Removing stale pidfile..."
      rm $pidfile
    fi
  fi
  return $return_code
}

ensure_no_more_tomcat() {
    for java_pid in $(ps -ef |grep java| grep tomcat |grep -Po '\-DPID=\K[^ ]+'); do
      echo "[uaa-kill-tomcat] Found leftover Java process - killing `ps -fp $java_pid`"
      kill -9 $java_pid
    done
}

case $1 in

  start)
    echo "[uaa-start] UAA start invoked - checking for running process"

    if ! pid_guard $PIDFILE "UAA"
    then
      exit 1
    fi

    echo "[uaa-start] About to starting UAA"
    ensure_no_more_tomcat

    touch $STATUS
    echo "[uaa-start] Health check STATUS file created"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    chown vcap:vcap $RUN_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > $PIDFILE
    chown vcap:vcap $PIDFILE

    <% if properties.uaa && properties.uaa.ldap &&  properties.uaa.ldap.sslCertificate %>
    /var/vcap/jobs/uaa/bin/install_crt ldap.crt ldapcert $KEYSTORE
    <% elsif properties.login && properties.login.ldap &&  properties.login.ldap.sslCertificate %>
    /var/vcap/jobs/uaa/bin/install_crt ldap.crt ldapcert $KEYSTORE
    <% end %>

    # Generate a random username and password for varz
    username=$RANDOM-$RANDOM-$RANDOM-$RANDOM
    password=$RANDOM-$RANDOM-$RANDOM-$RANDOM

    sed -i "s/_random_username_replaced_by_a_script_/${username}/g" $JOB_DIR/config/varz.yml
    sed -i "s/_random_password_replaced_by_a_script_/${password}/g" $JOB_DIR/config/varz.yml

    # We want to keep packages pristine, since tomcat is modified in place we stage it elsewhere.
    rm -rf $DATA_DIR
    mkdir -p $DATA_DIR
    cp -a /var/vcap/packages/uaa/tomcat $DATA_DIR
    cp -a /var/vcap/jobs/uaa/config/tomcat/* $DATA_DIR/tomcat/conf/

    export CLOUD_FOUNDRY_CONFIG_PATH=/var/vcap/jobs/uaa/config

    export JAVA_OPTS="-DPID=$$ -Dsun.net.inetaddr.ttl=60 -Dnetworkaddress.cache.ttl=60 $HTTP_PROXY_JAVA_OPTIONS $UAA_OPTIONS $NEWRELIC_OPTS $KEYSTORE_OPTS"
    export CATALINA_OPTS="<%= properties.uaa.catalina_opts %>"

    chown -R vcap:vcap $DATA_DIR

    # Install the server's ssl certificate
    <% if p("uaa.ssl.port") != -1 %>
        /var/vcap/jobs/uaa/bin/install_uaa_crt uaa.crt
    <% end %>

    cd /var/vcap/data/uaa
    echo "[uaa-start] Calling Tomcat start up command"
    exec chpst -u vcap:vcap tomcat/bin/catalina.sh run
    echo "[uaa-start] Tomcat start up in progress"
    ;;

  stop)
    echo "[uaa-stop] About to stop UAA"
    rm -f $STATUS
    sleep 5
    echo "[uaa-stop] Health check STATUS file removed"
    if [ -f $PIDFILE ]; then
      echo "[uaa-stop] Found UAA Tomcat PID file $PIDFILE - Killing `cat $PIDFILE`"
      kill `cat $PIDFILE`
      rm -rf $PIDFILE
      sleep 5
    fi
    ensure_no_more_tomcat
    ;;

  *)
    echo "Usage: uaa_ctl {start|stop}"

    ;;

esac
